
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_10_run_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_10_run_pipeline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_10_run_pipeline.py:


Run pyLossless on a BIDS dataset.
=================================

In this notebook, we will run the pyLossless pipeline on a publicly available dataset
that is already in BIDS format.

.. GENERATED FROM PYTHON SOURCE LINES 11-13

Imports
-------

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default

    from pathlib import Path
    import shutil
    import pylossless as ll








.. GENERATED FROM PYTHON SOURCE LINES 18-20

Get the data
------------

.. GENERATED FROM PYTHON SOURCE LINES 20-22

.. code-block:: default

    raw, config, bids_path = ll.datasets.load_openneuro_bids()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    👋 Hello! This is openneuro-py 2022.4.0. Great to see you! 🤗

       👉 Please report problems 🤯 and bugs 🪲 at
          https://github.com/hoechenberger/openneuro-py/issues

    🌍 Preparing to download ds002778 …
    📁 Traversing directories for ds002778 : 0 entities [00:00, ? entities/s]    📁 Traversing directories for ds002778 : 7 entities [00:04,  1.58 entities/s]    📁 Traversing directories for ds002778 : 8 entities [00:04,  1.74 entities/s]    📁 Traversing directories for ds002778 : 10 entities [00:04,  2.42 entities/s]    📁 Traversing directories for ds002778 : 14 entities [00:05,  4.25 entities/s]    📁 Traversing directories for ds002778 : 16 entities [00:05,  5.12 entities/s]    📁 Traversing directories for ds002778 : 18 entities [00:05,  5.92 entities/s]    📁 Traversing directories for ds002778 : 20 entities [00:05,  3.51 entities/s]
    📥 Retrieving up to 19 files (5 concurrent downloads). 
    CHANGES: 0.00B [00:00, ?B/s]
    dataset_description.json: 0.00B [00:00, ?B/s]                            
                                                     README: 0.00B [00:00, ?B/s]
    participants.json:   0%|          | 0.00/1.24k [00:00<?, ?B/s]
                                                                                                 participants.tsv:   0%|          | 0.00/1.62k [00:00<?, ?B/s]                                                                 sub-pd6_ses-off_task-rest_beh.json: 0.00B [00:00, ?B/s]
    sub-pd6_ses-off_scans.tsv:   0%|          | 0.00/75.0 [00:00<?, ?B/s]                                                       
                                                                             sub-pd6_ses-off_task-rest_beh.tsv:   0%|          | 0.00/10.0 [00:00<?, ?B/s]                                                                                 sub-pd6_ses-off_task-rest_channels.tsv:   0%|          | 0.00/2.22k [00:00<?, ?B/s]                                                                                       sub-pd6_ses-off_task-rest_events.tsv:   0%|          | 0.00/66.0 [00:00<?, ?B/s]                                                                                    sub-pd6_ses-off_task-rest_eeg.bdf:   0%|          | 0.00/11.5M [00:00<?, ?B/s]
    sub-pd6_ses-on_scans.tsv:   0%|          | 0.00/74.0 [00:00<?, ?B/s]
                                                                        
    sub-pd6_ses-off_task-rest_eeg.json:   0%|          | 0.00/471 [00:00<?, ?B/s]
                                                                                 
    sub-pd6_ses-on_task-rest_beh.json:   0%|          | 0.00/433 [00:00<?, ?B/s]
                                                                                    sub-pd6_ses-off_task-rest_eeg.bdf:   1%|          | 96.5k/11.5M [00:00<00:12, 980kB/s]
    sub-pd6_ses-on_task-rest_beh.tsv:   0%|          | 0.00/10.0 [00:00<?, ?B/s]
                                                                                
    sub-pd6_ses-on_task-rest_channels.tsv:   0%|          | 0.00/2.22k [00:00<?, ?B/s]
                                                                                          sub-pd6_ses-off_task-rest_eeg.bdf:   3%|2         | 306k/11.5M [00:00<00:07, 1.66MB/s]
    sub-pd6_ses-on_task-rest_events.tsv:   0%|          | 0.00/51.0 [00:00<?, ?B/s]
                                                                                   
    sub-pd6_ses-on_task-rest_eeg.json:   0%|          | 0.00/471 [00:00<?, ?B/s]
                                                                                    sub-pd6_ses-off_task-rest_eeg.bdf:   4%|4         | 478k/11.5M [00:00<00:07, 1.59MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:   0%|          | 0.00/17.4M [00:00<?, ?B/s]    sub-pd6_ses-off_task-rest_eeg.bdf:   8%|7         | 886k/11.5M [00:00<00:04, 2.53MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:   4%|3         | 659k/17.4M [00:00<00:02, 6.69MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  11%|#         | 1.21M/11.5M [00:00<00:03, 2.92MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:   9%|9         | 1.57M/17.4M [00:00<00:01, 8.45MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  13%|#3        | 1.50M/11.5M [00:00<00:04, 2.60MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  16%|#6        | 2.86M/17.4M [00:00<00:01, 10.7MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  26%|##5       | 4.47M/17.4M [00:00<00:01, 13.1MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  15%|#5        | 1.76M/11.5M [00:00<00:04, 2.04MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  35%|###5      | 6.13M/17.4M [00:00<00:00, 14.6MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  43%|####3     | 7.53M/17.4M [00:00<00:00, 13.8MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  17%|#7        | 1.98M/11.5M [00:00<00:05, 1.94MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  51%|#####1    | 8.86M/17.4M [00:00<00:00, 13.7MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  19%|#8        | 2.18M/11.5M [00:01<00:04, 1.98MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  59%|#####8    | 10.2M/17.4M [00:00<00:00, 13.7MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  21%|##        | 2.39M/11.5M [00:01<00:04, 2.01MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  23%|##2       | 2.61M/11.5M [00:01<00:04, 2.07MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  66%|######6   | 11.5M/17.4M [00:00<00:00, 12.2MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  25%|##5       | 2.92M/11.5M [00:01<00:03, 2.40MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  74%|#######3  | 12.8M/17.4M [00:01<00:00, 12.5MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  28%|##7       | 3.21M/11.5M [00:01<00:03, 2.52MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  81%|########  | 14.0M/17.4M [00:01<00:00, 12.3MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  31%|###       | 3.52M/11.5M [00:01<00:03, 2.74MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  88%|########7 | 15.2M/17.4M [00:01<00:00, 12.2MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  34%|###4      | 3.94M/11.5M [00:01<00:02, 3.12MB/s]
    sub-pd6_ses-on_task-rest_eeg.bdf:  96%|#########5| 16.6M/17.4M [00:01<00:00, 12.9MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  38%|###7      | 4.34M/11.5M [00:01<00:02, 3.41MB/s]
                                                                                              sub-pd6_ses-off_task-rest_eeg.bdf:  42%|####1     | 4.78M/11.5M [00:01<00:01, 3.73MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  45%|####5     | 5.20M/11.5M [00:02<00:01, 3.90MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  49%|####8     | 5.58M/11.5M [00:02<00:01, 3.57MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  52%|#####1    | 5.93M/11.5M [00:02<00:01, 3.58MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  55%|#####4    | 6.29M/11.5M [00:02<00:01, 3.42MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  58%|#####8    | 6.66M/11.5M [00:02<00:01, 3.54MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  63%|######3   | 7.29M/11.5M [00:02<00:01, 4.37MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  69%|######8   | 7.89M/11.5M [00:02<00:00, 4.90MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  74%|#######4  | 8.50M/11.5M [00:02<00:00, 5.28MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  79%|#######9  | 9.10M/11.5M [00:02<00:00, 5.56MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  85%|########5 | 9.76M/11.5M [00:02<00:00, 5.96MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  91%|######### | 10.4M/11.5M [00:03<00:00, 6.20MB/s]    sub-pd6_ses-off_task-rest_eeg.bdf:  96%|#########6| 11.1M/11.5M [00:03<00:00, 6.34MB/s]                                                                                           ✅ Finished downloading ds002778.
 
    🧠 Please enjoy your brains.
 




.. GENERATED FROM PYTHON SOURCE LINES 23-30

Prep the Raw object
-------------------

This data has EOG channels that are not labeled as such. We will manually set the
channel types to be "eog" for these channels (i.e. "EXG1"). We will also crop the
data to 60 seconds for speed, and load the data in memory, which is required for
running the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: default

    raw.set_channel_types({ch: "eog" for ch in raw.ch_names if ch.startswith("EX")})
    raw.load_data().crop(0, 60)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Reading 0 ... 97791  =      0.000 ...   190.998 secs...


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Measurement date</th>
        
            <td>February 18, 2011  13:07:18 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
        
            <td>mne_anonymize</td>
        
        </tr>
            <th>Participant</th>
        
            
                <td>sub-pd6</td>
            
        
        </tr>
        <tr>
            <th>Digitized points</th>
        
            <td>Not available</td>
        
        </tr>
        <tr>
            <th>Good channels</th>
            <td>32 EEG, 8 EOG, 1 Stimulus</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td>None</td>
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>EXG1, EXG2, EXG3, EXG4, EXG5, EXG6, EXG7, EXG8</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
    
        <tr>
            <th>Sampling frequency</th>
            <td>512.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Lowpass</th>
            <td>104.00 Hz</td>
        </tr>
    
    
    
        <tr>
            <th>Filenames</th>
            <td>sub-pd6_ses-off_task-rest_eeg.bdf</td>
        </tr>
    
        <tr>
            <th>Duration</th>
            <td>00:01:00 (HH:MM:SS)</td>
        </tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 34-42

Initialize the pipeline
-----------------------

The :class:`~pylossless.LosslessPipeline` instance is the main object that will
run the pipeline. It takes a file path to a :class:`~pylossless.config.Config` object
as input. :func:`~pylossless.datasets.load_openneuro_bids` returned a
:class:`~pylossless.config.Config` object, so we will save it to disk and pass the
file path to the :class:`~pylossless.LosslessPipeline` constructor.

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default

    config_path = Path("lossless_config.yaml")
    config["filtering"]["notch_filter_args"]["freqs"] = [60]
    config.save(config_path)
    pipeline = ll.LosslessPipeline(config_path)








.. GENERATED FROM PYTHON SOURCE LINES 48-56

Run the pipeline
----------------

The :class:`~pylossless.LosslessPipeline` object has a
:meth:`~pylossless.LosslessPipeline.run_with_raw` method that takes a
:class:`~mne.io.Raw` object as input.
We will use the :class:`~mne.io.Raw` object that was returned by
:func:`~pylossless.datasets.datasets.load_openneuro_bids` with the pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: default

    pipeline.run_with_raw(raw)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     ⏩ LOSSLESS: Starting Pylossless Pipeline.
    LOSSLESS: Skipping Looking for break periods between tasks
    LOSSLESS: 🚩 Flagging Noisy Channels.
    🧹 Epoching..
    Not setting metadata
    60 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 60 events and 512 original time points ...
    0 bad epochs dropped
    🔍 Detecting channels to leave out of reference.
    EEG channel type selected for re-referencing
    Applying a custom ('EEG',) reference.
    📋 LOSSLESS: Noisy channels: []
    LOSSLESS: 🏁 Finished Flagging Noisy Channels after 0.17 seconds.
    LOSSLESS: 🚩 Flagging Noisy Time periods.
    🧹 Epoching..
    Not setting metadata
    60 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 60 events and 512 original time points ...
    0 bad epochs dropped
    🔍 Detecting channels to leave out of reference.
    EEG channel type selected for re-referencing
    Applying a custom ('EEG',) reference.
    📋 LOSSLESS: Noisy epochs: [37]
    LOSSLESS: 🏁 Finished Flagging Noisy Time periods after 0.16 seconds.
    LOSSLESS: 🚩 Filtering.
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 1e+02 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 1.00 Hz (-6 dB cutoff frequency: 0.50 Hz)
    - Upper passband edge: 100.00 Hz
    - Upper transition bandwidth: 25.00 Hz (-6 dB cutoff frequency: 112.50 Hz)
    - Filter length: 1691 samples (3.303 sec)

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   4 out of   4 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  32 out of  32 | elapsed:    0.1s finished
    Setting up band-stop filter from 59 - 61 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 59.35
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 59.10 Hz)
    - Upper passband edge: 60.65 Hz
    - Upper transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 60.90 Hz)
    - Filter length: 3381 samples (6.604 sec)

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   4 out of   4 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  32 out of  32 | elapsed:    0.1s finished
    Setting up band-stop filter from 59 - 61 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandstop filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 59.35
    - Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 59.10 Hz)
    - Upper passband edge: 60.65 Hz
    - Upper transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 60.90 Hz)
    - Filter length: 3381 samples (6.604 sec)

    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done   4 out of   4 | elapsed:    0.0s remaining:    0.0s
    [Parallel(n_jobs=1)]: Done  32 out of  32 | elapsed:    0.1s finished
    LOSSLESS: 🏁 Finished Filtering after 0.74 seconds.
    LOSSLESS: 🚩 Flagging uncorrelated channels.
    🧹 Epoching..
    Not setting metadata
    60 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 60 events and 512 original time points ...
    1 bad epochs dropped
    🔍 Detecting channels to leave out of reference.
    EEG channel type selected for re-referencing
    Applying a custom ('EEG',) reference.
      0%|          | 0/32 [00:00<?, ?it/s]     12%|#2        | 4/32 [00:00<00:00, 39.84it/s]     28%|##8       | 9/32 [00:00<00:00, 42.23it/s]     44%|####3     | 14/32 [00:00<00:00, 41.26it/s]     59%|#####9    | 19/32 [00:00<00:00, 37.28it/s]     72%|#######1  | 23/32 [00:00<00:00, 31.97it/s]     84%|########4 | 27/32 [00:00<00:00, 24.20it/s]     94%|#########3| 30/32 [00:01<00:00, 24.77it/s]    100%|##########| 32/32 [00:01<00:00, 28.94it/s]
    📋 LOSSLESS: Uncorrelated channels: []
    LOSSLESS: 🏁 Finished Flagging uncorrelated channels after 1.53 seconds.
    LOSSLESS: 🚩 Flagging Bridged channels.
    📋 LOSSLESS: Bridged channels: ['PO3' 'O1' 'Oz' 'O2' 'PO4']
    LOSSLESS: 🏁 Finished Flagging Bridged channels after 0.01 seconds.
    LOSSLESS: 🚩 Flagging the rank channel.
    📋 LOSSLESS: Rank channel: ['Fp2']
    LOSSLESS: 🏁 Finished Flagging the rank channel after 0.01 seconds.
    LOSSLESS: 🚩 Flagging Uncorrelated epochs.
    🧹 Epoching..
    Not setting metadata
    60 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 60 events and 512 original time points ...
    1 bad epochs dropped
    🔍 Detecting channels to leave out of reference.
    EEG channel type selected for re-referencing
    Applying a custom ('EEG',) reference.
      0%|          | 0/26 [00:00<?, ?it/s]     19%|#9        | 5/26 [00:00<00:00, 42.40it/s]     38%|###8      | 10/26 [00:00<00:00, 34.49it/s]     54%|#####3    | 14/26 [00:00<00:00, 30.88it/s]     69%|######9   | 18/26 [00:00<00:00, 26.85it/s]     85%|########4 | 22/26 [00:00<00:00, 29.82it/s]    100%|##########| 26/26 [00:00<00:00, 28.28it/s]    100%|##########| 26/26 [00:00<00:00, 29.66it/s]
    📋 LOSSLESS: Uncorrelated epochs: []
    LOSSLESS: 🏁 Finished Flagging Uncorrelated epochs after 1.14 seconds.
    LOSSLESS: 🚩 Running Initial ICA.
    🧹 Epoching..
    Not setting metadata
    60 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 60 events and 512 original time points ...
    1 bad epochs dropped
    🔍 Detecting channels to leave out of reference.
    EEG channel type selected for re-referencing
    Applying a custom ('EEG',) reference.
    Fitting ICA to data using 26 channels (please be patient, this may take a while)
    Selecting by non-zero PCA components: 25 components
    /Users/shuberty/github_repos/my_envs/pylossless/lib/python3.11/site-packages/sklearn/decomposition/_fastica.py:123: ConvergenceWarning: FastICA did not converge. Consider increasing tolerance or the maximum number of iterations.
      warnings.warn(
    Fitting ICA took 31.5s.
    LOSSLESS: 🏁 Finished Running Initial ICA after 31.81 seconds.
    LOSSLESS: 🚩 Flagging time periods with noisy IC's..
    🧹 Epoching..
    Not setting metadata
    60 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 60 events and 512 original time points ...
    1 bad epochs dropped
    🔍 Detecting channels to leave out of reference.
    EEG channel type selected for re-referencing
    Applying a custom ('EEG',) reference.
    LOSSLESS: 🏁 Finished Flagging time periods with noisy IC's. after 0.38 seconds.
    LOSSLESS: 🚩 Running Final ICA..
    🧹 Epoching..
    Not setting metadata
    60 matching events found
    No baseline correction applied
    0 projection items activated
    Using data from preloaded Raw for 60 events and 512 original time points ...
    5 bad epochs dropped
    🔍 Detecting channels to leave out of reference.
    EEG channel type selected for re-referencing
    Applying a custom ('EEG',) reference.
    Fitting ICA to data using 26 channels (please be patient, this may take a while)
    Selecting by non-zero PCA components: 25 components
    Computing Extended Infomax ICA
    Fitting ICA took 12.4s.
    LOSSLESS: 🏁 Finished Running Final ICA. after 21.74 seconds.
      ✅ LOSSLESS: Pipeline completed! took 0.96 minutes.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Measurement date</th>
        
            <td>February 18, 2011  13:07:18 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
        
            <td>mne_anonymize</td>
        
        </tr>
            <th>Participant</th>
        
            
                <td>sub-pd6</td>
            
        
        </tr>
        <tr>
            <th>Digitized points</th>
        
            <td>35 points</td>
        
        </tr>
        <tr>
            <th>Good channels</th>
            <td>32 EEG, 8 EOG, 1 Stimulus</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td>None</td>
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>EXG1, EXG2, EXG3, EXG4, EXG5, EXG6, EXG7, EXG8</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
    
        <tr>
            <th>Sampling frequency</th>
            <td>512.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Highpass</th>
            <td>1.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Lowpass</th>
            <td>100.00 Hz</td>
        </tr>
    
    
    
        <tr>
            <th>Filenames</th>
            <td>sub-pd6_ses-off_task-rest_eeg.bdf</td>
        </tr>
    
        <tr>
            <th>Duration</th>
            <td>00:01:00 (HH:MM:SS)</td>
        </tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-62

View the results
----------------


.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h3>LosslessPipeline</h3><table><tr><td><strong>Raw</strong></td><td>('/Users/shuberty/github_repos/pylossless/examples/ds002778/sub-pd6/ses-off/eeg/sub-pd6_ses-off_task-rest_eeg.bdf',)</td></tr><tr><td><strong>Config</strong></td><td>lossless_config.yaml</td></tr></table><details><summary><strong>Flagged Channels</strong></summary><table><tr><td>Noisy</td><td>[]</td></tr><tr><td>Bridged</td><td>['PO3' 'O1' 'Oz' 'O2' 'PO4']</td></tr><tr><td>Uncorrelated</td><td>[]</td></tr></table></details><details><summary><strong>Flagged ICs</strong></summary><table><tr><td>EOG (Eye)</td><td>['ICA000', 'ICA012']</td></tr><tr><td>ECG (Heart)</td><td>[]</td></tr><tr><td>Muscle</td><td>['ICA001', 'ICA002', 'ICA004', 'ICA005', 'ICA008']</td></tr><tr><td>Line Noise</td><td>[]</td></tr><tr><td>Channel Noise</td><td>[]</td></tr></table></details><details><summary><strong>Flagged Times (Total)</strong></summary><table><tr><td>bad_pylossless_ch_sd</td><td>1.00 s seconds</td></tr><tr><td>bad_pylossless_low_r</td><td>[] seconds</td></tr><tr><td>bad_pylossless_ic_sd1</td><td>3.99 s seconds</td></tr></table></details>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 65-67

The :class:`~pylossless.LosslessPipeline` object stores flagged channels in
the :attr:`~pylossless.LosslessPipeline.flags` attribute:

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: default

    pipeline.flags["ch"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Flagged channels: |
      Noisy: []
      Bridged: ['PO3' 'O1' 'Oz' 'O2' 'PO4']
      Uncorrelated: []
      Rank: ['Fp2']




.. GENERATED FROM PYTHON SOURCE LINES 70-72

The independent components and their associated Labels (determined by the MNE-ICALabel
package) are also stored in the :attr:`~pylossless.LosslessPipeline.flags` attribute:

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: default

    pipeline.flags["ic"]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>component</th>
          <th>annotator</th>
          <th>ic_type</th>
          <th>confidence</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>ICA000</td>
          <td>ic_label</td>
          <td>eog</td>
          <td>0.999227</td>
        </tr>
        <tr>
          <th>1</th>
          <td>ICA001</td>
          <td>ic_label</td>
          <td>muscle</td>
          <td>0.340964</td>
        </tr>
        <tr>
          <th>2</th>
          <td>ICA002</td>
          <td>ic_label</td>
          <td>muscle</td>
          <td>0.999688</td>
        </tr>
        <tr>
          <th>3</th>
          <td>ICA003</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.999853</td>
        </tr>
        <tr>
          <th>4</th>
          <td>ICA004</td>
          <td>ic_label</td>
          <td>muscle</td>
          <td>0.954841</td>
        </tr>
        <tr>
          <th>5</th>
          <td>ICA005</td>
          <td>ic_label</td>
          <td>muscle</td>
          <td>0.998799</td>
        </tr>
        <tr>
          <th>6</th>
          <td>ICA006</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.995625</td>
        </tr>
        <tr>
          <th>7</th>
          <td>ICA007</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.867607</td>
        </tr>
        <tr>
          <th>8</th>
          <td>ICA008</td>
          <td>ic_label</td>
          <td>muscle</td>
          <td>0.999990</td>
        </tr>
        <tr>
          <th>9</th>
          <td>ICA009</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.672345</td>
        </tr>
        <tr>
          <th>10</th>
          <td>ICA010</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.912643</td>
        </tr>
        <tr>
          <th>11</th>
          <td>ICA011</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.879564</td>
        </tr>
        <tr>
          <th>12</th>
          <td>ICA012</td>
          <td>ic_label</td>
          <td>eog</td>
          <td>0.991628</td>
        </tr>
        <tr>
          <th>13</th>
          <td>ICA013</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.986970</td>
        </tr>
        <tr>
          <th>14</th>
          <td>ICA014</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.982706</td>
        </tr>
        <tr>
          <th>15</th>
          <td>ICA015</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.558324</td>
        </tr>
        <tr>
          <th>16</th>
          <td>ICA016</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.973885</td>
        </tr>
        <tr>
          <th>17</th>
          <td>ICA017</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.604656</td>
        </tr>
        <tr>
          <th>18</th>
          <td>ICA018</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.842136</td>
        </tr>
        <tr>
          <th>19</th>
          <td>ICA019</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.978842</td>
        </tr>
        <tr>
          <th>20</th>
          <td>ICA020</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.949224</td>
        </tr>
        <tr>
          <th>21</th>
          <td>ICA021</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.731403</td>
        </tr>
        <tr>
          <th>22</th>
          <td>ICA022</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.968890</td>
        </tr>
        <tr>
          <th>23</th>
          <td>ICA023</td>
          <td>ic_label</td>
          <td>brain</td>
          <td>0.629394</td>
        </tr>
        <tr>
          <th>24</th>
          <td>ICA024</td>
          <td>ic_label</td>
          <td>other</td>
          <td>0.795245</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-85

Get the cleaned data
--------------------

The :class:`~pylossless.LosslessPipeline` by default does not modify the
:class:`~mne.io.Raw` object that is passed to it, so none of the flagged channels
or ICs are removed from the :class:`~mne.io.Raw` object yet. To get the cleaned
:class:`~mne.io.Raw` object, we need to call the
:meth:`~pylossless.LosslessPipeline.make_cleaned_raw` method. This method takes a
:class:`~pylossless.config.rejection.RejectionPolicy` as input, which specifies how
to apply the flags to generate a new :class:`~mne.io.Raw` object.

.. GENERATED FROM PYTHON SOURCE LINES 85-89

.. code-block:: default

    rejection_policy = ll.RejectionPolicy()
    rejection_policy["ch_cleaning_mode"] = "interpolate"
    rejection_policy





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    RejectionPolicy: |
      config_fname: None
      ch_flags_to_reject: ['ch_sd', 'low_r', 'bridge']
      ic_flags_to_reject: ['muscle', 'ecg', 'eog', 'channel_noise', 'line_noise']
      ic_rejection_threshold: 0.3
      ch_cleaning_mode: interpolate
      remove_flagged_ics: True




.. GENERATED FROM PYTHON SOURCE LINES 90-94

We set the channel cleaning mode to ``"interpolate"``, which means that the flagged
channels will be interpolated. Similar to the :class:`~pylossless.config.Config`,
We need to save this `~pylossless.config.rejection.RejectionPolicy` to disk, and pass
the file to return a new cleaned :class:`~mne.io.Raw` object:

.. GENERATED FROM PYTHON SOURCE LINES 94-99

.. code-block:: default

    rejection_policy_path = Path("rejection_policy.yaml")
    rejection_policy.save(rejection_policy_path)
    cleaned_raw = pipeline.make_cleaned_raw(rejection_policy_path)
    cleaned_raw.plot()




.. image-sg:: /auto_examples/images/sphx_glr_plot_10_run_pipeline_001.png
   :alt: plot 10 run pipeline
   :srcset: /auto_examples/images/sphx_glr_plot_10_run_pipeline_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Interpolating bad channels
        Automatic origin fit: head of radius 95.3 mm
    Computing interpolation matrix from 27 sensor positions
    Interpolating 5 sensors
    Applying ICA to Raw instance
        Transforming to ICA space (25 components)
        Zeroing out 7 ICA components
        Projecting back using 26 PCA components
    Using matplotlib as 2D backend.

    <MNEBrowseFigure size 1440x844 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 100-106

Save the PyLossless Derivative
------------------------------

Let's save our pipeline output to disk. We need to use our
:class:`~mne_bids.BIDSPath` object to set up a derivatives path to save the
pipeline output to:

.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: default

    derivatives_path = pipeline.get_derivative_path(bids_path)
    derivatives_path





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    BIDSPath(
    root: ds002778/derivatives/pylossless
    datatype: eeg
    basename: sub-pd6_ses-off_task-rest_eeg_ll)



.. GENERATED FROM PYTHON SOURCE LINES 110-112

.. code-block:: default

    pipeline.save(derivatives_path)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Writing 'ds002778/derivatives/pylossless/README'...
    Writing 'ds002778/derivatives/pylossless/participants.tsv'...
    Writing 'ds002778/derivatives/pylossless/participants.json'...
    Writing 'ds002778/derivatives/pylossless/sub-pd6/ses-off/eeg/sub-pd6_ses-off_space-CapTrak_electrodes.tsv'...
    Writing 'ds002778/derivatives/pylossless/sub-pd6/ses-off/eeg/sub-pd6_ses-off_space-CapTrak_coordsystem.json'...
    The provided raw data contains annotations, but you did not pass an "event_id" mapping from annotation descriptions to event codes. We will generate arbitrary event codes. To specify custom event codes, please pass "event_id".
    Used Annotations descriptions: ['1', '65536', 'bad_pylossless_ch_sd', 'bad_pylossless_gap', 'bad_pylossless_ic_sd1']
    Writing 'ds002778/derivatives/pylossless/sub-pd6/ses-off/eeg/sub-pd6_ses-off_task-rest_events.tsv'...
    Writing 'ds002778/derivatives/pylossless/dataset_description.json'...
    Writing 'ds002778/derivatives/pylossless/sub-pd6/ses-off/eeg/sub-pd6_ses-off_task-rest_eeg.json'...
    Writing 'ds002778/derivatives/pylossless/sub-pd6/ses-off/eeg/sub-pd6_ses-off_task-rest_channels.tsv'...
    Copying data files to sub-pd6_ses-off_task-rest_eeg.edf
    /Users/shuberty/github_repos/pylossless/pylossless/pipeline.py:1091: RuntimeWarning: Converting data files to EDF format
      mne_bids.write_raw_bids(
    /Users/shuberty/github_repos/pylossless/pylossless/pipeline.py:1091: RuntimeWarning: EDF format requires equal-length data blocks, so 0.998046875 seconds of zeros were appended to all channels when writing the final block.
      mne_bids.write_raw_bids(
    Writing 'ds002778/derivatives/pylossless/sub-pd6/ses-off/sub-pd6_ses-off_scans.tsv'...
    Wrote ds002778/derivatives/pylossless/sub-pd6/ses-off/sub-pd6_ses-off_scans.tsv entry with eeg/sub-pd6_ses-off_task-rest_eeg.edf.
    Writing ICA solution to /Users/shuberty/github_repos/pylossless/examples/ds002778/derivatives/pylossless/sub-pd6/ses-off/eeg/sub-pd6_ses-off_task-rest_ica1_ica.fif...
    Writing ICA solution to /Users/shuberty/github_repos/pylossless/examples/ds002778/derivatives/pylossless/sub-pd6/ses-off/eeg/sub-pd6_ses-off_task-rest_ica2_ica.fif...




.. GENERATED FROM PYTHON SOURCE LINES 113-116

Clean up
--------


.. GENERATED FROM PYTHON SOURCE LINES 116-119

.. code-block:: default

    shutil.rmtree(bids_path.root)
    config_path.unlink()
    rejection_policy_path.unlink()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.832 seconds)


.. _sphx_glr_download_auto_examples_plot_10_run_pipeline.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_10_run_pipeline.py <plot_10_run_pipeline.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_10_run_pipeline.ipynb <plot_10_run_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
